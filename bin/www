#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const client = require('socket.io-client');
const socketListeners = require('../socket/socketListeners');
// const BlockChain = require('../modals/chain');
var debug = require('debug')('blockchain-test:server');
var http = require('http');
var socketApi = require('../socket/socketApi');
var io = socketApi.io;

var myPorts = require('../port');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io.attach(server);

myPorts.port = port;
myPorts.io = io;

var {doIniBc} = require('../iniChain');
doIniBc();

// io.on('connection', (socket) => {
//   console.info(`Socket connected, ID: ${socket.id}`);
//   socket.on('disconnect', () => {
//     console.log(`Socket disconnected, ID: ${socket.id}`);
//   });
// });

/**
 * Listen on provided port, on all network interfaces.
 */

// blockChain.addNode(socketListeners(client(`http://localhost:${port}`), blockChain));

server.listen(port, () => console.info(`Express server running on ${port}...`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}